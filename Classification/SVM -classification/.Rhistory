set.seed(123)
s= sample.split(d$tmm,SplitRatio=0.70)
train=subset(d,s==TRUE)
test=subset(d,s==FALSE)
library(rpart)
tree = rpart(tmm~., data=train , method="class")
printcp(tree)
plotcp(tree)
library(rpart.plot)
prp(tree)
rpart.plot(tree, extra=101)
tree = rpart(tmm~., data=train , method="class")
printcp(tree)
plotcp(tree)
d<- read.csv( file = "E:\\RESEARCH_PAPER_NIDHI\\SEVERITY\\KOTLIN\\Kotlin_Cart\\LCLM_k.csv")
d<- read.csv( file = "E:\\RESEARCH_PAPER_NIDHI\\CART\\Kotlin_Cart_inputfiles\\LCLM_k.csv")
print(d)
dim(d)
str(d)
d<- read.csv( file = "E:\\RESEARCH_PAPER_NIDHI\\CART\\Kotlin_Cart_inputfiles\\LCLM_k.csv")
print(d)
dim(d)
str(d)
################install.packages("rpart", "rpart.plot", "caret", "caTools", "ROCR", "pROC")
library(caTools)
set.seed(123)
s= sample.split(d$lclm,SplitRatio=0.70)
train=subset(d,s==TRUE)
test=subset(d,s==FALSE)
library(rpart)
tree = rpart(lclm~., data=train , method="class")
tree <- rpart(lclm ~., method='class',control = rpart.control(xval = 10, minbucket =10, cp = 0))
tree = rpart(lclm~., data=train , method="class")
tree = rpart(lclm~., data=train , method="class")
tree
printcp(tree)
plotcp(tree)
tree1 <- rpart(lclm ~., data=train, method='class', control = rpart.control(xval = 10, minbucket =10, cp = 0))
tree1
####prunee <- prune(tree, cp = 0.02)
printcp(tree1)
plotcp(tree1)
d<- read.csv( file = "E:\\RESEARCH_PAPER_NIDHI\\CART\\Kotlin_Cart_inputfiles\\SLD_k.csv")
print(d)
dim(d)
str(d)
################install.packages("rpart", "rpart.plot", "caret", "caTools", "ROCR", "pROC")
library(caTools)
set.seed(123)
s= sample.split(d$sld,SplitRatio=0.70)
train=subset(d,s==TRUE)
test=subset(d,s==FALSE)
library(rpart)
tree = rpart(sld~., data=train , method="class")
tree
printcp(tree)
plotcp(tree)
tree1 <- rpart(sld ~., data=train, method='class', control = rpart.control(xval = 10, minbucket =10, cp = 0))
tree1
####prunee <- prune(tree, cp = 0.02)
printcp(tree1)
plotcp(tree1)
tree1 <- rpart(sld ~., data=train, method='class', control = rpart.control(xval = 10, cp = 0))
tree1
####prunee <- prune(tree, cp = 0.02)
printcp(tree1)
plotcp(tree1)
library(rpart.plot)
prp(tree)
rpart.plot(tree, extra=101)
###set.seed(123)
library(caret)
d<- read.csv( file = "E:\\RESEARCH_PAPER_NIDHI\\CART\\Kotlin_Cart_inputfiles\\LPL_k.csv")
print(d)
dim(d)
str(d)
################install.packages("rpart", "rpart.plot", "caret", "caTools", "ROCR", "pROC")
library(caTools)
set.seed(123)
s= sample.split(d$lpl,SplitRatio=0.70)
train=subset(d,s==TRUE)
test=subset(d,s==FALSE)
library(rpart)
tree = rpart(lpl~., data=train , method="class")
tree
printcp(tree)
plotcp(tree)
tree1 <- rpart(lpl ~., data=train, method='class', control = rpart.control(xval = 10, cp = 0))
tree1
####prunee <- prune(tree, cp = 0.02)
printcp(tree1)
plotcp(tree1)
library(rpart.plot)
prp(tree)
rpart.plot(tree, extra=101)
library(caret)
tree = rpart(lpl~., data=train , method="class")
tree
printcp(tree)
plotcp(tree)
tree1 <- rpart(lpl ~., data=train, method='class', control = rpart.control(xval = 10, cp = 0))
tree1
####prunee <- prune(tree, cp = 0.02)
printcp(tree1)
d<- read.csv( file = "E:\\RESEARCH_PAPER_NIDHI\\CART\\Kotlin_Cart_inputfiles\\LCLM_k.csv")
print(d)
dim(d)
str(d)
################install.packages("rpart", "rpart.plot", "caret", "caTools", "ROCR", "pROC")
library(caTools)
set.seed(123)
s= sample.split(d$lclm,SplitRatio=0.70)
train=subset(d,s==TRUE)
test=subset(d,s==FALSE)
library(rpart)
library(caret)
tree = rpart(lclm~., data=train , method="class")
tree
printcp(tree)
plotcp(tree)
tree1 <- rpart(lclm ~., data=train, method='class', control = rpart.control(xval = 10, cp = 0))
tree1
####prunee <- prune(tree, cp = 0.02)
printcp(tree1)
plotcp(tree1)
d<- read.csv( file = "E:\\RESEARCH_PAPER_NIDHI\\CART\\Kotlin_Cart_inputfiles\\SLD_k.csv")
print(d)
dim(d)
str(d)
################install.packages("rpart", "rpart.plot", "caret", "caTools", "ROCR", "pROC")
library(caTools)
set.seed(123)
s= sample.split(d$sld,SplitRatio=0.70)
train=subset(d,s==TRUE)
test=subset(d,s==FALSE)
library(rpart)
library(caret)
tree = rpart(sld~., data=train , method="class")
tree
printcp(tree)
plotcp(tree)
tree1 <- rpart(sld ~., data=train, method='class', control = rpart.control(xval = 10, cp = 0))
tree1
####prunee <- prune(tree, cp = 0.02)
printcp(tree1)
plotcp(tree1)
ininstall.packages("rvest")
install.packages("rvest")
library(rvest)
codacy = read_html("https://app.codacy.com/manual/vidhichauhan/RxDownload/issues?&filters=W3siaWQiOiJMYW5ndWFnZSIsInZhbHVlcyI6WyJLb3RsaW4iXX0seyJpZCI6IkNhdGVnb3J5IiwidmFsdWVzIjpbXX0seyJpZCI6IkxldmVsIiwidmFsdWVzIjpbXX0seyJpZCI6IlBhdHRlcm4iLCJ2YWx1ZXMiOlsiNDg2OCJdfV0=")
View(codacy)
View(codacy)
library(rvest)
url="https://app.codacy.com/manual/vidhichauhan/RxDownload/issues?&filters=W3siaWQiOiJMYW5ndWFnZSIsInZhbHVlcyI6WyJLb3RsaW4iXX0seyJpZCI6IkNhdGVnb3J5IiwidmFsdWVzIjpbXX0seyJpZCI6IkxldmVsIiwidmFsdWVzIjpbXX0seyJpZCI6IlBhdHRlcm4iLCJ2YWx1ZXMiOlsiNDg2OCJdfV0="
codacy = read_html(url)
codacy %>%
html_node("title") %>% html_text()
codacy %>% html_node("title") %>% html_text()
#reading the title of the page (title of page has class/tag named as title)
codacy %>% html_node(".file-title margin-top") %>% html_text()
#reading the title of the page (title of page has class/tag named as title)
codacy %>% html_node(.file-title margin-top) %>% html_text()
#reading the title of the page (title of page has class/tag named as title)
codacy %>% html_node("h4.file-title margin-top") %>% html_text()
#reading the title of the page (title of page has class/tag named as title)
codacy %>% html_node("div.h4.file-title margin-top") %>% html_text()
#given the name varibale name as codacya n read html file
codacy = read_html(url)
#reading the title of the page (title of page has class/tag named as title)
codacy %>% html_node("div.h4.file-title margin-top") %>% html_text()
#reading the title of the page (title of page has class/tag named as title)
codacy %>% html_node("div.div.div.div.div.div.div.h4.file-title margin-top") %>% html_text()
# Visualising the Training set results
install.packages('ElemStatLearn')
d<- read.csv( file = "CC_K.csv")
setwd("E:/KOTLIN_RESEARCH_PAPER_NIDHI/CART/Kotlin_Cart_inputfiles")
d<- read.csv( file = "CC_K.csv")
View(d)
View(d)
d<- read.csv( file = "CC_K.csv")
print(d)
dim(d)
str(d)
################install.packages("rpart", "rpart.plot", "caret", "caTools", "ROCR", "pROC")
library(caTools)
set.seed(123)
s= sample.split(d$cc,SplitRatio=0.70)
train=subset(d,s==TRUE)
test=subset(d,s==FALSE)
library(rpart)
tree = rpart(cc~., data=train , method="class")
printcp(tree)
plotcp(tree)
library(rpart.plot)
prp(tree)
rpart.plot(tree, extra=101)
###set.seed(123)
library(caret)
###model <- caret::train(SLEVELCC ~., data =train, method = "rpart",trControl = trainControl("cv", number = 10),tuneLength = 10)
###print(model)
###plot(model)
###model$bestTune
###cpp=model$bestTune
###cpp
treeprune= rpart(cc~., data=train , method="class", control=rpart.control(cp=0.047))
treeprune
library(rpart.plot)
rpart.plot(treeprune, extra=101 , digits=2)
prp(treeprune)
pred <- predict(treeprune, test, type = "class")
data.frame(test,pred)
confusionMatrix(test$cc,pred)
t<-table(test$cc,pred)
accuracy<-sum(diag(t))/sum(t)
accuracy
### at 1,2,3,4
library(pROC)
predprobs <- predict(treeprune, test, type='prob')
predprobs
aucm<-multiclass.roc(test$cc, predprobs)
##plot(multiclass.roc(test$SLEVELcc, predprobs))
aucm
# Visualising the Training set results
install.packages('ElemStatLearn')
# Visualising the Training set results
install.packages('ElemStatLearn')
library(ElemStatLearn)
# Visualising the Training set results
install.packages('ElemStatLearn')
library(ElemStatLearn)
set = train
install.packages('ElemStatLearn')
library(ElemStatLearn)
set = train
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('RFC', 'WCM', 'LOC','CMLOC', 'LCAM')
y_grid = predict(treeprune, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Decision Tree Classification (Training set)',
//xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Visualising the Training set results
install.packages("ElemStatLearn")
library(ElemStatLearn)
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/Random Forest")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
View(dataset)
View(dataset)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/Decesion Tree")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Decision Tree Classification to the Training set
# install.packages('rpart')
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Plotting the tree
plot(classifier)
text(classifier)
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/kernel-SVM")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Kernel SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/KNN")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting K-NN to the Training set and Predicting the Test set results
library(class)
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5,
prob = TRUE)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
# Fitting K-NN to the Training set and Predicting the Test set results
library(class)
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5,
prob = TRUE)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/Logistic regression")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Logistic Regression to the Training set
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Fitting Logistic Regression to the Training set
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
# Predicting the Test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred > 0.5)
cm
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/NaiveBayes")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/Random Forest")
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Choosing the number of trees
plot(classifier)
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Fitting Random Forest Classification to the Training set
install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
# Choosing the number of trees
plot(classifier)
cm
setwd("C:/Users/2nd/Desktop/Machine Learning Practises using R/Classification/SVM -classification")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
plot(classifier)
